# -*- coding: utf-8 -*-
"""healthcare.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oqYNzIqaQ4n3RG5_Zkk0EtMMIzibq6Iw
"""

import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score , classification_report

df = pd.read_csv("/content/healthcare-dataset-stroke-data.csv")
df



df.head()



df.info()



df.isna().sum()



print(df["gender"].head())
print(df["gender"].dtype)



df["gender"] = df["gender"].map({"Male":1,"Female":0,"Other":2})



print(df["gender"].head())
print(df["gender"].dtype)



print(df["work_type"].head())
print(df["work_type"].dtype)



df["work_type"] = df["work_type"].map({"Private":1 , " Self-employed":0 , "Other":2})



print(df["work_type"].head())
print(df["work_type"].dtype)



df['work_type'].fillna(df['work_type'].mode()[0], inplace=True)



print(df["work_type"].head())
print(df["work_type"].dtype)



df["Residence_type"] = df["Residence_type"].map({"Urban":1 , "Rural":0})



df["ever_married"] = df["ever_married"].map({"Yes":1 , "No":0})

df["smoking_status"] = df["smoking_status"].map({
    "never smoked": 0,
    "Unknown": 1,
    "formerly smoked": 2,
    "smokes": 3
})



df["smoking_status"].head()

bmi = df["bmi"]
x  = bmi.mean()
df["bmi"].fillna(x, inplace=True)

df.isna().sum()

df["smoking_status"].head()





df.columns

feature_cols = ['id', 'gender', 'age', 'hypertension', 'heart_disease', 'ever_married','work_type', 'Residence_type', 'avg_glucose_level', 'bmi', 'smoking_status' , 'stroke']

x = df[feature_cols]
y = df.stroke

x = df.drop('stroke', axis=1)

y = df['stroke']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier()
clf.fit(x_train, y_train)
y_pred = clf.predict(x_test)
classidication_report = classification_report(y_test, y_pred)
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:\n", classidication_report)



from skl2onnx import convert_sklearn
from skl2onnx.common.data_types import FloatTensorType
inital_type = [('float_input', FloatTensorType([None, 11]))]
onx = convert_sklearn(clf, initial_types=inital_type)
with open("stroke_prediction.onnx", "wb") as f:
    f.write(onx.SerializeToString())































































